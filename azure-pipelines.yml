trigger:
  branches:
    include:
    - '*'

stages:
- stage: Test
  jobs:
  - job: Ubuntu
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
    - script: python --version
    - script: |
        sudo apt-get update
        sudo apt-get install -y libldap2-dev libsasl2-dev ldap-utils sasl2-bin
        sudo apt-get install -y krb5-user libsasl2-modules-gssapi-mit libkrb5-dev
        apt list --installed
      displayName: Install OS dependencies
    - script: |
        python -m pip install --upgrade pip
        python -m pip install poetry wheel
        poetry config virtualenvs.create false
        poetry install --no-root -E gevent -E tornado
        python -m pip list
      displayName: Install Python dependencies
    - script: docker build -t bonsai -f ./.ci/docker/Dockerfile .
      displayName: Build Docker image
    - script: |
        mkdir /tmp/bonsai
        sudo chown 2001:2000 /tmp/bonsai
        docker run --cap-add=NET_ADMIN -v /tmp/bonsai/:/home/ldap/run/:z -d -h bonsai.test --name server bonsai
        export BONSAI_DOCKER_IP=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' server`
        sudo bash -c 'echo -e "\n'$BONSAI_DOCKER_IP'        bonsai.test" >> /etc/hosts'
        cat /etc/hosts
        ping -c 2 bonsai.test
        sleep 4
      displayName: Configure Docker container
    - script: |
        docker exec server ps aux
        ldapwhoami -Y DIGEST-MD5 -h bonsai.test -U admin -w p@ssword
        ldapsearch -h bonsai.test -b "" -s base 'objectclass=*' -x -LLL +
        ldapsearch -VV
        saslpluginviewer
      displayName: Check container and LDAP tools
    - script: |
        printf "\n\n[options]\nzip_safe = False" >> setup.cfg
        export CFLAGS="-coverage"
        python setup.py install
      displayName: Install package
    - script: |
        export BONSAI_DOCKER_IP=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' server`
        sed -i.bak "s/127.0.0.1/$BONSAI_DOCKER_IP/g" ./tests/test.ini
        export KRB5_CONFIG="`pwd`/.ci/krb5/krb5.conf"
        export BONSAI_INSTALL_PATH=`python -c "import bonsai; print(bonsai.__file__[:-12])"`
        echo $BONSAI_INSTALL_PATH
        python -c 'import bonsai;print(bonsai.get_vendor_info(), bonsai.get_tls_impl_name())'
        py.test -v --cov-config .coveragerc --junitxml=./test-results.xml --cov=$BONSAI_INSTALL_PATH
      displayName: Run tests
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: test-results.xml
        testRunTitle: Tests on $(Agent.OS) with Python $(python.version)
      condition: succeededOrFailed()
    - script: |
          PATH=$HOME/.local/bin:$PATH
          codecov
      env:
        CODECOV_TOKEN: $(codecov)
      displayName: Report Coverage
      condition: succeeded()
  - job: macOS
    pool:
      vmImage: "macos-latest"
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
    - script: python --version
    - script: |
        python -m pip install --upgrade pip
        python -m pip install poetry wheel
        poetry config virtualenvs.create false
        poetry install --no-root -E gevent -E tornado
        python -m pip list
      displayName: Install Python dependencies
    - script: bash ./.github/workflows/scripts/install_docker_mac.sh
      displayName: Install Docker
    - script: |
        bash ./.github/workflows/scripts/wait_docker_mac.sh
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.Kerberos.kdc.plist
      displayName: Wait on Docker
    - script: docker build -t bonsai -f ./.ci/docker/Dockerfile .
      displayName: Build Docker image
    - script: |
        mkdir /tmp/bonsai
        sudo chown 2001:2000 /tmp/bonsai
        docker run --cap-add=NET_ADMIN -p 389:389 -p 636:636 -p 88:88/udp -p 749:749 -p 8000:8000 -d -h bonsai.test --name server bonsai
        sudo bash -c 'echo -e "\n127.0.0.1        bonsai.test" >> /etc/hosts'
        sudo scutil --set HostName bonsai.test
        cat /etc/hosts
        ping -c 2 bonsai.test
        sleep 5
      displayName: Configure Docker container
    - script: |
        docker exec server ps aux
        ldapwhoami -Y DIGEST-MD5 -h bonsai.test -U admin -w p@ssword
        ldapsearch -x -h bonsai.test -b "" -s base 'objectclass=*' -LLL +
        ldapsearch -VV
      displayName: Check container and LDAP tools
    - script: |
        printf "[build_ext]\ninclude_dirs=/usr/local/opt/openldap/include\nlibrary_dirs=/usr/local/opt/openldap/lib" > ./setup.cfg
        printf "\n\n[options]\nzip_safe = False" >> setup.cfg
        export CFLAGS="-coverage"
        python setup.py install
      displayName: Install package
    - script: otool -L ./build/*/bonsai/*.so
      displayName: Check linking
    - script: |
        export KRB5_CONFIG="`pwd`/.ci/krb5/krb5.conf"
        export BONSAI_INSTALL_PATH=`python -c "import bonsai; print(bonsai.__file__[:-12])"`
        echo $BONSAI_INSTALL_PATH
        python -c 'import bonsai;print(bonsai.get_vendor_info(), bonsai.get_tls_impl_name())'
        py.test -v --cov-config .coveragerc --junitxml=./test-results.xml --cov=$BONSAI_INSTALL_PATH
      displayName: Run tests
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: test-results.xml
        testRunTitle: Tests on $(Agent.OS) with Python $(python.version)
      condition: succeededOrFailed()
    - script: |
          PATH=$HOME/.local/bin:$PATH
          codecov
      env:
        CODECOV_TOKEN: $(codecov)
      displayName: Report Coverage
      condition: succeeded()
    - script: |
        python setup.py clean
        python setup.py build -f
        python setup.py bdist_wheel
        delocate-wheel -v ./dist/bonsai-*.whl
      displayName: Create wheel
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/dist/'
        contents: '*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: wheels
  - job: Docker
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        newestOpenLDAP:
          openldap.version: '2.6.1'
          python.version: '3.7-slim-buster'
        nightlyPython:
          openldap.version: '2.4.49'
          python.version: '3.11.0a4-slim-bullseye'
    steps:
    - script: docker build -t bonsai -f ./.ci/docker/Dockerfile .
      displayName: Build Docker image (server)
    - script: |
        docker build -t client \
          --build-arg=PYTHON_VERSION=$PY_VER \
          --build-arg=OPENLDAP_VERSION=$OL_VER \
          -f ./.ci/docker/Dockerfile-client .
      env:
        PY_VER: $(python.version)
        OL_VER: $(openldap.version)
      displayName: Build Docker image (client)
    - script: |
        mkdir /tmp/bonsai
        sudo chown 2001:2000 /tmp/bonsai
        docker network create test
        docker run --cap-add=NET_ADMIN -v /tmp/bonsai/:/home/ldap/run/:z -d -h bonsai.test --network test --name bonsai bonsai
        sleep 4
        export BONSAI_DOCKER_IP=`docker inspect --format '{{ .NetworkSettings.Networks.test.IPAddress }}' bonsai`
        echo $BONSAI_DOCKER_IP
        docker run \
          -e BONSAI_DOCKER_IP=$BONSAI_DOCKER_IP \
          -e KRB5_CONFIG=/opt/bonsai/.ci/krb5/krb5.conf \
          -v /tmp/bonsai/:/tmp/bonsai/ \
          -v `pwd`:/opt/bonsai/ -d -h client.test --network test --name client client
      displayName: Start Docker containers
    - script: |
        docker exec bonsai ps aux
        docker exec client ping -c 2 bonsai.test
        docker exec client ldapsearch -VV
        docker exec client ldapwhoami -Y DIGEST-MD5 -H ldap://bonsai.test -U admin -w p@ssword
        docker exec client ldapsearch -H ldap://bonsai.test -b "" -s base 'objectclass=*' -x -LLL +
      displayName: Check container and LDAP tools
    - script: |
        docker exec client poetry config virtualenvs.create false
        docker exec client poetry install --no-root -E gevent -E tornado
        docker exec client python3 -m pip list
      displayName: Install Python dependencies
    - script: |
        docker exec client python3 setup.py install
      displayName: Install package
    - script: |
        docker exec client bash -c 'sed -i.bak "s/127.0.0.1/$BONSAI_DOCKER_IP/g" ./tests/test.ini'
        docker exec client python -c 'import bonsai;print(bonsai.get_vendor_info(), bonsai.get_tls_impl_name())'
        docker exec client py.test -vs
      displayName: Run tests
